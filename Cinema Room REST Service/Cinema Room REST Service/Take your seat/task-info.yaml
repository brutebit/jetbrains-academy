type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("row", 1)
                        .value("column", 1)
                        .value("price", 10)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds
        };
    }
  learner_created: false
- name: src/cinema/Room.java
  visible: true
  text: |
    package cinema;

    public class Room {
      private final int numRows;
      private final int numSeatsInRow;
      private final char[][] seats;

      public Room(int numRows, int numSeatsInRow) {
        this.numRows = numRows;
        this.numSeatsInRow = numSeatsInRow;
        seats = new char[numRows][numSeatsInRow];

        for (int i = 0; i < numRows; i++)
          for (int j = 0; j < numSeatsInRow; j++)
            seats[i][j] = 'S';
      }

      public int getNumRows() {
        return numRows;
      }

      public int getNumSeatsInRow() {
        return numSeatsInRow;
      }

      public boolean isSeatAvailable(int row, int column) {
        return seats[row][column] == 'S';
      }
    }
  learner_created: true
- name: src/cinema/usecases/PresentRoomUseCase.java
  visible: true
  text: |
    package cinema;

    import java.util.ArrayList;
    import java.util.List;

    public class GetAvailableSeatsUseCase {
      private final Room room;
      private List<SeatPresentation> availableSeats;
      private int totalRows;
      private int totalColumns;

      public GetAvailableSeatsUseCase(Room room) {
        this.room = room;
        totalRows = room.getNumRows();
        totalColumns = room.getNumSeatsInRow();
      }

      public void execute() {
        List<SeatPresentation> availableSeats = new ArrayList<>();
        for (int i = 0; i < room.getNumRows(); i++)
          for (int j = 0; j < room.getNumSeatsInRow(); j++)
            if (room.isSeatAvailable(i, j))
              availableSeats.add(new SeatPresentation(i + 1, j + 1));
        this.availableSeats = availableSeats;
      }

      public List<SeatPresentation> getAvailableSeats() {
        return availableSeats;
      }

      public int getTotalRows() {
        return totalRows;
      }

      public int getTotalColumns() {
        return totalColumns;
      }
    }
  learner_created: true
- name: src/cinema/usecases/PurchaseTicketUseCase.java
  visible: true
  learner_created: true
- name: src/cinema/controllers/PurchaseController.java
  visible: true
  learner_created: true
- name: src/cinema/controllers/RoomInfoController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.List;

    @RestController
    public class SeatsController {

      @GetMapping("/seats")
      public RoomPresentation getAvailableSeats() {
        var room = new Room(9, 9);
        var useCase = new GetAvailableSeatsUseCase(room);
        useCase.execute();
        var roomPresentation = new RoomPresentation();
        roomPresentation.setAvailable_seats(useCase.getAvailableSeats());
        roomPresentation.setTotal_columns(useCase.getTotalColumns());
        roomPresentation.setTotal_rows(useCase.getTotalRows());
        return roomPresentation;
      }
    }
  learner_created: true
- name: src/cinema/presentations/PurchasePresentation.java
  visible: true
  learner_created: true
- name: src/cinema/presentations/RoomPresentation.java
  visible: true
  text: |
    package cinema;

    import java.util.List;

    public class RoomPresentation {
      private List<SeatPresentation> available_seats;
      private int total_rows;
      private int total_columns;

      public List<SeatPresentation> getAvailable_seats() {
        return available_seats;
      }

      public void setAvailable_seats(List<SeatPresentation> available_seats) {
        this.available_seats = available_seats;
      }

      public int getTotal_rows() {
        return total_rows;
      }

      public void setTotal_rows(int total_rows) {
        this.total_rows = total_rows;
      }

      public int getTotal_columns() {
        return total_columns;
      }

      public void setTotal_columns(int total_columns) {
        this.total_columns = total_columns;
      }
    }
  learner_created: true
- name: src/cinema/presentations/SeatPresentation.java
  visible: true
  text: |
    package cinema;

    public class SeatPresentation {
      private final int row;
      private final int column;

      public SeatPresentation(int row, int column) {
        this.row = row;
        this.column = column;
      }

      public int getRow() {
        return row;
      }

      public int getColumn() {
        return column;
      }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/946/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 10 Oct 2021 16:33:58 UTC
record: 2
