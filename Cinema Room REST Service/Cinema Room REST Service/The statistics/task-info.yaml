type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/presentations/RoomPresentation.java
  visible: true
  text: |
    package cinema.presentations;

    import java.util.List;

    public class RoomPresentation {
      public List<SeatPresentation> available_seats;
      public int total_rows;
      public int total_columns;
    }
  learner_created: true
- name: src/cinema/usecases/PurchaseTicketUseCase.java
  visible: true
  text: |
    package cinema.usecases;

    import cinema.Room;
    import cinema.TokenRegistrar;

    public class PurchaseTicketUseCase {
      private final Room room;

      public PurchaseTicketUseCase(Room room) {
        this.room = room;
      }

      public String execute(int row, int column) throws Room.InvalidRowOrColumnException, TicketUnavailableException {
        if (room.isSeatAvailable(row, column)) {
          var token = TokenRegistrar.generateToken(room.getSeatAt(row, column));
          room.purchaseSeat(row, column);
          return token;
        }

        throw new TicketUnavailableException();
      }

      static public class TicketUnavailableException extends Exception {
      }
    }
  learner_created: true
- name: src/cinema/presentations/ReturnTicketPresentation.java
  visible: true
  text: |
    package cinema.presentations;

    public class ReturnTicketPresentation {
      public SeatPresentation returned_ticket;
    }
  learner_created: true
- name: src/cinema/controllers/ReturnTicketController.java
  visible: true
  text: |
    package cinema.controllers;

    import cinema.Room;
    import cinema.controllers.exceptions.ControllerException;
    import cinema.presentations.ReturnTicketPresentation;
    import cinema.presentations.SeatPresentation;
    import cinema.usecases.ReturnTicketUseCase;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class ReturnTicketController {

      @Autowired
      private Room room;

      @PostMapping("/return")
      public ReturnTicketPresentation returnTicket(@RequestBody ReturnTicketRequestBody body) {
        var useCase = new ReturnTicketUseCase(room);
        try {
          var seat = useCase.execute(body.token);
          var presentation = new ReturnTicketPresentation();
          presentation.returned_ticket = new SeatPresentation(seat);
          return presentation;
        } catch (ReturnTicketUseCase.InvalidTokenException e) {
          throw new InvalidTokenException(HttpStatus.BAD_REQUEST, "Wrong token!");
        }
      }

      static class ReturnTicketRequestBody {
        public String token;
      }

      public static class InvalidTokenException extends ControllerException {
        public InvalidTokenException(HttpStatus status, String message) {
          super(status, message);
        }
      }
    }
  learner_created: true
- name: src/cinema/presentations/SeatPresentation.java
  visible: true
  text: |
    package cinema.presentations;

    import cinema.Seat;

    public class SeatPresentation {
      public final int row;
      public final int column;
      public final int price;

      public SeatPresentation(Seat seat) {
        this.row = seat.getRow();
        this.column = seat.getColumn();
        this.price = seat.getPrice();
      }
    }
  learner_created: true
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    public class Seat {
      private boolean available = true;
      private final int price;
      private final int row;
      private final int column;

      public Seat(int row, int column) {
        this.row = row;
        this.column = column;
        if (row <= 4)
          price = 10;
        else
          price = 8;
      }

      public int getRow() {
        return row;
      }

      public int getColumn() {
        return column;
      }

      public int getPrice() {
        return price;
      }

      public boolean isAvailable() {
        return available;
      }

      public void setAvailable(boolean available) {
        this.available = available;
      }

    }
  learner_created: true
- name: src/cinema/presentations/PurchaseTicketPresentation.java
  visible: true
  text: |
    package cinema.presentations;

    import cinema.Seat;

    public class PurchaseTicketPresentation {
      public SeatPresentation ticket;
      public String token;
    }
  learner_created: true
- name: src/cinema/controllers/RoomInfoController.java
  visible: true
  text: |
    package cinema.controllers;

    import cinema.Room;
    import cinema.presentations.RoomPresentation;
    import cinema.usecases.PresentRoomUseCase;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class RoomInfoController {

      @Autowired
      private Room room;

      @GetMapping("/seats")
      public RoomPresentation fetchAvailableSeats() throws Room.InvalidRowOrColumnException {
        var useCase = new PresentRoomUseCase(room);
        useCase.execute();
        var roomPresentation = new RoomPresentation();
        roomPresentation.available_seats = useCase.getAvailableSeats();
        roomPresentation.total_columns = useCase.getTotalColumns();
        roomPresentation.total_rows = useCase.getTotalRows();
        return roomPresentation;
      }
    }
  learner_created: true
- name: src/cinema/Room.java
  visible: true
  text: |
    package cinema;

    public class Room {
      private final int rows;
      private final int columns;
      private final Seat[][] seats;

      public Room(int rows, int columns) {
        this.rows = rows;
        this.columns = columns;
        seats = new Seat[rows][columns];

        for (int i = 0; i < rows; i++)
          for (int j = 0; j < columns; j++)
              seats[i][j] = new Seat(i + 1, j + 1);
      }

      public Seat getSeatAt(int row, int column) throws InvalidRowOrColumnException {
        try {
          return seats[row - 1][column - 1];
        } catch (ArrayIndexOutOfBoundsException e) {
          throw new InvalidRowOrColumnException();
        }
      }

      public int getRows() {
        return rows;
      }

      public int getColumns() {
        return columns;
      }

      public boolean isSeatAvailable(int row, int column) throws InvalidRowOrColumnException {
        try {
          return seats[row - 1][column - 1].isAvailable();
        } catch (ArrayIndexOutOfBoundsException e) {
          throw new InvalidRowOrColumnException();
        }
      }

      public void purchaseSeat(int row, int column) throws InvalidRowOrColumnException {
        try {
          seats[row - 1][column - 1].setAvailable(false);;
        } catch (ArrayIndexOutOfBoundsException e) {
          throw new InvalidRowOrColumnException();
        }
      }

      public void returnSeat(int row, int column) throws InvalidRowOrColumnException {
        try {
          seats[row - 1][column - 1].setAvailable(true);
        } catch (Exception e) {
          throw new InvalidRowOrColumnException();
        }
      };

      static public class InvalidRowOrColumnException extends Exception {
      }
    }
  learner_created: true
- name: src/cinema/controllers/PurchaseController.java
  visible: true
  text: |
    package cinema.controllers;

    import cinema.Room;
    import cinema.controllers.exceptions.ControllerException;
    import cinema.presentations.PurchaseTicketPresentation;
    import cinema.presentations.SeatPresentation;
    import cinema.usecases.PurchaseTicketUseCase;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class PurchaseController {

      @Autowired
      private Room room;

      @PostMapping("/purchase")
      public PurchaseTicketPresentation purchaseTicket(@RequestBody PurchaseRequest pr) {
        var useCase = new PurchaseTicketUseCase(room);
        try {
          var token = useCase.execute(pr.row, pr.column);
          var presentation = new PurchaseTicketPresentation();
          presentation.ticket = new SeatPresentation(room.getSeatAt(pr.row, pr.column));
          presentation.token = token;
          return presentation;
        } catch (Room.InvalidRowOrColumnException e) {
          throw new InvalidRowOrColumnException();
        } catch (PurchaseTicketUseCase.TicketUnavailableException e) {
          throw new TicketUnavailableException();
        }
      }

      static class PurchaseRequest {
        public int row;
        public int column;
      }

      public static class InvalidRowOrColumnException extends ControllerException {
        public InvalidRowOrColumnException() {
          super(HttpStatus.BAD_REQUEST, "The number of a row or a column is out of bounds!");
        }
      }

      public static class TicketUnavailableException extends ControllerException {
        public TicketUnavailableException() {
          super(HttpStatus.BAD_REQUEST, "The ticket has been already purchased!");
        }
      }

    }
  learner_created: true
- name: src/cinema/usecases/ReturnTicketUseCase.java
  visible: true
  text: |
    package cinema.usecases;

    import cinema.Room;
    import cinema.Seat;
    import cinema.TokenRegistrar;

    public class ReturnTicketUseCase {
      private final Room room;

      public ReturnTicketUseCase(Room room) {
        this.room = room;
      }

      public Seat execute(String token) throws InvalidTokenException {
        var seat = TokenRegistrar.getSeat(token);
        if (seat == null)
          throw new InvalidTokenException();
        TokenRegistrar.unregisterToken(seat);
        try {
          room.returnSeat(seat.getRow(), seat.getColumn());
        } catch (Room.InvalidRowOrColumnException e) {
          e.printStackTrace();
        }
        return seat;
      }

      public static class InvalidTokenException extends Throwable {
      }
    }
  learner_created: true
- name: src/cinema/TokenRegistrar.java
  visible: true
  text: |
    package cinema;

    import java.util.UUID;
    import java.util.concurrent.ConcurrentHashMap;

    public class TokenRegistrar {
      private static final ConcurrentHashMap<Seat, String> registeredTokens = new ConcurrentHashMap<>();

      public static String generateToken(Seat seat) {
        if (registeredTokens.get(seat) != null)
          throw new Error("Already registered");
        var token = UUID.randomUUID().toString();
        if (registeredTokens.contains(token))
          return generateToken(seat);
        registeredTokens.put(seat, token);
        return token;
      }

      public static void unregisterToken(Seat seat) {
        registeredTokens.remove(seat);
      }

      public static String getToken(Seat seat) {
        return registeredTokens.get(seat);
      }

      public static Seat getSeat(String token) {
        for (var it = registeredTokens.keys().asIterator(); it.hasNext(); ) {
          var seat = it.next();
          if (registeredTokens.get(seat).equals(token))
            return seat;
        }
        return null;
      }
    }
  learner_created: true
- name: src/cinema/controllers/CustomControllerAdvice.java
  visible: true
  text: |
    package cinema.controllers.exceptions;

    import cinema.controllers.PurchaseController;
    import cinema.controllers.ReturnTicketController;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseBody;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    import javax.servlet.http.HttpServletRequest;

    @RestController
    @ControllerAdvice()
    public class CustomControllerAdvice extends ResponseEntityExceptionHandler {

      @ResponseBody
      @ExceptionHandler({
          PurchaseController.InvalidRowOrColumnException.class,
          PurchaseController.TicketUnavailableException.class,
          ReturnTicketController.InvalidTokenException.class
      })
      public ResponseEntity<ErrorBody> handleControllerException(HttpServletRequest request, ControllerException ex) {
        return new ResponseEntity<>(new ErrorBody(ex.getMessage()), ex.getStatus());
      }

      static class ErrorBody {
        private final String error;

        public ErrorBody(String error) {
          this.error = error;
        }

        public String getError() {
          return error;
        }
      }
    }
  learner_created: true
- name: src/cinema/controllers/ControllerException.java
  visible: true
  text: |
    package cinema.controllers.exceptions;

    import org.springframework.http.HttpStatus;

    public abstract class ControllerException extends RuntimeException {
      protected final HttpStatus status;

      public ControllerException(HttpStatus status, String message) {
        super(message);
        this.status = status;
      }

      public HttpStatus getStatus() {
        return status;
      }
    }
  learner_created: true
- name: src/cinema/usecases/ShowRoomUseCase.java
  visible: true
  text: |
    package cinema.usecases;

    import cinema.Room;
    import cinema.presentations.SeatPresentation;

    import java.util.ArrayList;
    import java.util.List;

    public class PresentRoomUseCase {
      private final Room room;
      private List<SeatPresentation> availableSeats;
      private final int totalRows;
      private final int totalColumns;

      public PresentRoomUseCase(Room room) {
        this.room = room;
        totalRows = room.getRows();
        totalColumns = room.getColumns();
      }

      public void execute() throws Room.InvalidRowOrColumnException {
        List<SeatPresentation> availableSeats = new ArrayList<>();
        for (int i = 0; i < room.getRows(); i++)
          for (int j = 0; j < room.getColumns(); j++)
            if (room.isSeatAvailable(i + 1, j + 1))
              availableSeats.add(new SeatPresentation(room.getSeatAt(i + 1, j + 1)));
        this.availableSeats = availableSeats;
      }

      public List<SeatPresentation> getAvailableSeats() {
        return availableSeats;
      }

      public int getTotalRows() {
        return totalRows;
      }

      public int getTotalColumns() {
        return totalColumns;
      }
    }
  learner_created: true
- name: src/cinema/usecases/ShowStatisticsUseCase.java
  visible: true
  learner_created: true
- name: src/cinema/presentations/StatisticsPresentation.java
  visible: true
  learner_created: true
- name: src/cinema/controllers/StatisticsController.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 13 Oct 2021 09:01:03 UTC
record: -1
